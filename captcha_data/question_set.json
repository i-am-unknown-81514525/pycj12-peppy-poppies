{
    "construct": [
        "{init} {dyn:base}",
        "{init} {dyn:base} {cont} {dyn:part}",
        "{init} {dyn:base} {cont} {dyn:part} {cont} {dyn:part}"
    ],
    "base": [
        {
            "question": "add {y} squared to x",
            "validator": "validator=lambda x: x + {y}**2",
            "range": { "y": [1, 50] },
            "input": [1, 65536]
        },
        {
            "question": "subtract {y} cubed from x",
            "validator": "validator=lambda x: x - {y}**3",
            "range": { "y": [1, 20] },
            "input": [1, 65536]
        },
        {
            "question": "multiply x by {y} and then add {z}",
            "validator": "validator=lambda x: x*{y}+{z}",
            "range": { "y": [2, 200], "z": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "divide x by {y} and then subtract {z}",
            "validator": "validator=lambda x: x//{y}-{z}",
            "range": { "y": [2, 200], "z": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "x squared plus {y} squared",
            "validator": "validator=lambda x: x**2 + {y}**2",
            "range": { "y": [1, 32768] },
            "input": [1, 65536]
        },
        {
            "question": "x cubed minus {y} squared",
            "validator": "validator=lambda x: x**3 - {y}**2",
            "range": { "y": [1, 32768] },
            "input": [1, 4096]
        },
        {
            "question": "bitwise XOR x with {y} then add {z}",
            "validator": "validator=lambda x: (x ^ {y}) + {z}",
            "range": { "y": [0, 65535], "z": [-100, 100] },
            "input": [1, 65536]
        },
        {
            "question": "bitwise AND x with {y} then multiply by {z}",
            "validator": "validator=lambda x: (x & {y}) * {z}",
            "range": { "y": [0, 65535], "z": [1, 20] },
            "input": [1, 65536]
        },
        {
            "question": "bitwise OR x with {y} then subtract {z}",
            "validator": "validator=lambda x: (x | {y}) - {z}",
            "range": { "y": [0, 65535], "z": [-50, 50] },
            "input": [1, 65536]
        },
        {
            "question": "the sum of x and {y} cubed",
            "validator": "validator=lambda x: x + {y}**3",
            "range": { "y": [1, 1024] },
            "input": [1, 65536]
        },
        {
            "question": "x subtract by {y} cubed",
            "validator": "validator=lambda x: x - {y}**3",
            "range": { "y": [1, 1024] },
            "input": [1, 65536]
        },
        {
            "question": "x subtract from {y} cubed",
            "validator": "validator=lambda x: {y}**3 - x",
            "range": { "y": [1, 10] },
            "input": [1, 65536]
        },
        {
            "question": "the product of x and {y} squared",
            "validator": "validator=lambda x: x * {y}**2",
            "range": { "y": [1, 256] },
            "input": [1, 65536]
        },
        {
            "question": "x modulo {y} plus {z}",
            "validator": "validator=lambda x: x % {y} + {z}",
            "range": { "y": [1, 100], "z": [-50, 50] },
            "input": [1, 65536]
        },
        {
            "question": "x divided by {y} plus {z} squared",
            "validator": "validator=lambda x: x//{y} + ({z})**2",
            "range": { "y": [1, 20], "z": [-10, 10] },
            "input": [1, 65536]
        },
        {
            "question": "x plus the factorial of {y}",
            "validator": "from math import factorial; validator=lambda x: x + factorial({y})",
            "range": { "y": [0, 6] },
            "input": [1, 65536]
        },
        {
            "question": "x minus the factorial of {y}",
            "validator": "from math import factorial; validator=lambda x: x - factorial({y})",
            "range": { "y": [0, 6] },
            "input": [1, 65536]
        },
        {
            "question": "x plus the {y}-th prime number",
            "validator": "from sympy import prime; validator=lambda x: x + prime({y})",
            "range": { "y": [1, 4000] },
            "input": [1, 65536]
        },
        {
            "question": "x minus the {y}-th prime number",
            "validator": "from sympy import prime; validator=lambda x: x - prime({y})",
            "range": { "y": [1, 4000] },
            "input": [1, 65536]
        },
        {
            "question": "x plus the sum of first {y} natural numbers",
            "validator": "validator=lambda x: x + {y}*({y}+1)//2",
            "range": { "y": [1, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "x minus the sum of first {y} natural numbers",
            "validator": "validator=lambda x: x - {y}*({y}+1)//2",
            "range": { "y": [1, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "{y} plus the sum of first x natural numbers",
            "validator": "validator=lambda x: x + {y}*({y}+1)//2",
            "range": { "y": [1, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "{y} minus the sum of first x natural numbers",
            "validator": "validator=lambda x: x - {y}*({y}+1)//2",
            "range": { "y": [1, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "add {y} to x and then multiply by {z}",
            "validator": "validator=lambda x: (x + {y}) * {z}",
            "range": { "y": [1, 100], "z": [1, 20] },
            "input": [1, 1000]
        },
        {
            "question": "subtract {y} from x and then divide by {z}",
            "validator": "validator=lambda x: (x - {y}) // {z}",
            "range": { "y": [1, 100], "z": [1, 10] },
            "input": [1, 1000]
        },
        {
            "question": "bitwise AND x with {y}",
            "validator": "validator=lambda x: x & {y}",
            "range": { "y": [0, 65535] },
            "input": [1, 65536]
        },
        {
            "question": "bitwise OR x with {y}",
            "validator": "validator=lambda x: x | {y}",
            "range": { "y": [0, 65535] },
            "input": [1, 65536]
        },
        {
            "question": "bitwise XOR x with {y}",
            "validator": "validator=lambda x: x ^ {y}",
            "range": { "y": [0, 65535] },
            "input": [1, 65536]
        },
        {
            "question": "multiply x by 2 and add {y}",
            "validator": "validator=lambda x: x*2 + {y}",
            "range": { "y": [-50, 50] },
            "input": [1, 65536]
        },
        {
            "question": "divide x by 2 and subtract {y}",
            "validator": "validator=lambda x: x//2 - {y}",
            "range": { "y": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "x modulo {y}",
            "validator": "validator=lambda x: x % {y}",
            "range": { "y": [1, 100] },
            "input": [1, 65536]
        },
        {
            "question": "{y} minus x",
            "validator": "validator=lambda x: {y} - x",
            "range": { "y": [1, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "square x and add {y}",
            "validator": "validator=lambda x: x**2 + {y}",
            "range": { "y": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "x cubed and subtract {y}",
            "validator": "validator=lambda x: x**3 - {y}",
            "range": { "y": [-65536, 65536] },
            "input": [1, 1024]
        },
        {
            "question": "shift x left by {y} bits",
            "validator": "validator=lambda x: x << {y}",
            "range": { "y": [0, 50] },
            "input": [1, 65536]
        },
        {
            "question": "shift x right by {y} bits",
            "validator": "validator=lambda x: x >> {y}",
            "range": { "y": [0, 50] },
            "input": [1, 65536]
        },
        {
            "question": "the sum of x and {y} squared",
            "validator": "validator=lambda x: x + {y}**2",
            "range": { "y": [1, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "the absolute difference between x and {y} squared",
            "validator": "validator=lambda x: abs(x - ({y})**2)",
            "range": { "y": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "the product of x and {y} plus {z}",
            "validator": "validator=lambda x: x*{y} + {z}",
            "range": { "y": [1, 65536], "z": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "the integer division of x by {y} minus {z}",
            "validator": "validator=lambda x: x//{y} - {z}",
            "range": { "y": [1, 200], "z": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "the absolute difference between x and {y}",
            "validator": "validator=lambda x: abs(x - {y})",
            "range": { "y": [0, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "the next multiple of {y} greater than or equal to x",
            "validator": "import math; validator=lambda x: math.ceil(x/{y})*{y}",
            "range": { "y": [1, 200] },
            "input": [1, 65536]
        },
        {
            "question": "the largest multiple of {y} less than or equal to x",
            "validator": "import math; validator=lambda x: math.floor(x/{y})*{y}",
            "range": { "y": [1, 200] },
            "input": [1, 65536]
        },
        {
            "question": "{y}+x",
            "validator": "validator=lambda x: {y}+x",
            "range": { "y": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "x-th prime number",
            "validator": "from sympy import prime; validator=prime",
            "range": {},
            "input": [1, 4000]
        },
        {
            "question": "[x+{y}]-th prime number",
            "validator": "from sympy import prime; validator=lambda x:prime(x+{y})",
            "range": { "y": [1, 2000] },
            "input": [1, 2000]
        },
        {
            "question": "the x-th fibonacci number with starting point at (1, 1) (for clarity, fib(1)=1, fib(2)=1)",
            "validator": "from sympy import fibonacci; validator=fibonacci",
            "range": {},
            "input": [3, 50]
        },
        {
            "question": "the x-th fibonacci number with starting point at ({y}, {z}) (for clarity, fib(1)={y}, fib(2)={z})",
            "validator": "from sympy import fibonacci; validator=lambda x:{y}*fibonacci(x-2)+{z}*fibonacci(x-1) # Since __base__>=3, no handling needed for 0,1,2",
            "range": { "y": [0, 9], "z": [1, 9] },
            "input": [3, 50]
        },
        {
            "question": "{y}-x",
            "validator": "validator=lambda x:{y}-x",
            "range": { "y": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "x-{y}",
            "validator": "validator=lambda x:x-{y}",
            "range": { "y": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "{y}*x",
            "validator": "validator=lambda x:{y}*x",
            "range": { "y": [-65536, 65536] },
            "input": [1, 65536]
        },
        {
            "question": "the x-th natural number(exclude 0), k that have a remainder of {y} when divide by {z}",
            "validator": "validator=lambda x:(x-1)*{z}+{y}",
            "range": { "y": [1, 20], "z": [21, 200] },
            "input": [1, 65536]
        }
    ],
    "part": [
        {
            "question": "add {y}",
            "validator": "validator=lambda x:x+{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "subtract {y}",
            "validator": "validator=lambda x:x-{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "subtract from {y}",
            "validator": "validator=lambda x:{y}-x",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "multiply by {y}",
            "validator": "validator=lambda x:x*{y}",
            "range": {
                "y": [1, 65536]
            }
        },
        {
            "question": "multiply by {y}",
            "validator": "validator=lambda x:x*{y}",
            "range": {
                "y": [-65536, -1]
            }
        },
        {
            "question": "integer divide {y}",
            "validator": "validator=lambda x:x//{y}",
            "range": {
                "y": [1, 65536]
            }
        },
        {
            "question": "integer divide by {y}",
            "validator": "validator=lambda x:x//{y}",
            "range": {
                "y": [-65536, -1]
            }
        },
        {
            "question": "bitwise XOR by {y}",
            "validator": "validator=lambda x:x^{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "bitwise invert",
            "validator": "validator=lambda x:~x",
            "range": {}
        },
        {
            "question": "bitwise AND by {y}",
            "validator": "validator=lambda x:x&{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "bitwise OR by {y}",
            "validator": "validator=lambda x:x|{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "modulo by {y}",
            "validator": "validator=lambda x:x%{y}",
            "range": {
                "y": [1, 65536]
            }
        },
        {
            "question": "raise to the power of {y}",
            "validator": "validator=lambda x:x**{y}",
            "range": {
                "y": [1, 5]
            }
        },
        {
            "question": "bitwise left shift by {y}",
            "validator": "validator=lambda x:x<<{y}",
            "range": {
                "y": [0, 31]
            }
        },
        {
            "question": "bitwise right shift by {y}",
            "validator": "validator=lambda x:x>>{y}",
            "range": {
                "y": [0, 31]
            }
        },
        {
            "question": "get the absolute value",
            "validator": "validator=lambda x:abs(x)",
            "range": {}
        },
        {
            "question": "get the minimum of the current value and {y}",
            "validator": "validator=lambda x: min(x, {y})",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "get the maximum of the current value and {y}",
            "validator": "validator=lambda x: max(x, {y})",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "get the negative of the value",
            "validator": "validator=lambda x: -x",
            "range": {}
        },
        {
            "question": "get the integer square root of the absolute value",
            "validator": "import math; validator=lambda x: math.isqrt(abs(x))",
            "range": {}
        },
        {
            "question": "count the number of set bits (1s) in the absolute value's binary representation",
            "validator": "validator=lambda x: bin(abs(x)).count('1')",
            "range": {}
        },
        {
            "question": "get the negative of the result",
            "validator": "validator=lambda x: -x",
            "range": {}
        },
        {
            "question": "find the integer part of its square root (of its absolute value)",
            "validator": "import math; validator=lambda x: math.isqrt(abs(x))",
            "range": {}
        },
        {
            "question": "find the absolute difference from {y}",
            "validator": "validator=lambda x: abs(x - {y})",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "raise the result to the power of {y}, then modulo by {z}",
            "validator": "validator=lambda x: pow(x, {y}, {z})",
            "range": {
                "y": [1, 5],
                "z": [2, 1000]
            }
        },
        {
            "question": "find the remainder of the result when divided by the {y}",
            "validator": "validator=lambda x: x % {y}",
            "range": {
                "y": [1, 256]
            }
        },
        {
            "question": "count the number of set bits in its binary representation of the absolute value",
            "validator": "validator=lambda x: bin(abs(x)).count('1')",
            "range": {}
        },
        {
            "question": "find the greatest common divisor with {y}",
            "validator": "import math; validator=lambda x: math.gcd(x, {y})",
            "range": {
                "y": [1, 65536]
            }
        },
        {
            "question": "square the value",
            "validator": "validator=lambda x: x*x",
            "range": {}
        },
        {
            "question": "cube the value",
            "validator": "validator=lambda x: x**3",
            "range": {}
        },
        {
            "question": "find the number of decimal digits in the absolute value",
            "validator": "validator=lambda x: len(str(abs(x)))",
            "range": {}
        },
        {
            "question": "sum the decimal digits of the absolute value",
            "validator": "validator=lambda x: sum(int(d) for d in str(abs(x)))",
            "range": {}
        },
        {
            "question": "find the smallest multiple of {y} that is greater than or equal to the absolute value of the current value",
            "validator": "import math; validator=lambda x: x//{y} * {y} + (0 if x%{y}==0 else {y})",
            "range": {
                "y": [1, 1000]
            }
        },
        {
            "question": "find the largest multiple of {y} that is less than or equal to the absolute value of the current value",
            "validator": "import math; validator=lambda x: x//{y} * {y}",
            "range": {
                "y": [1, 1000]
            }
        },
        {
            "question": "compute the natural logarithm of the (absolute value of the result + 1) and rounded down to integer",
            "validator": "import math; validator=lambda x: int(math.log(abs(x)+1)) if x>0 else 0",
            "range": {}
        },
        {
            "question": "compute the base-10 logarithm of the absolute valud of the result or 0 if invalid (rounded down to integer)",
            "validator": "import math; validator=lambda x: len(str(abs(x)))-1",
            "range": {}
        },
        {
            "question": "compute the absolute value of the negative of the result",
            "validator": "validator=lambda x: abs(-x)",
            "range": {}
        },
        {
            "question": "round the absolute value of the result up to nearest multiple of {y}",
            "validator": "import math; validator=lambda x: x//{y} * {y} + (0 if x%{y}==0 else {y})",
            "range": {
                "y": [1, 50]
            }
        },
        {
            "question": "round the absolute value of the result down to nearest multiple of {y}",
            "validator": "import math; validator=lambda x: x//{y} * {y}",
            "range": {
                "y": [1, 50]
            }
        },
        {
            "question": "compute the number of divisors of the result mod {y}",
            "validator": "from sympy import divisors; validator=lambda x: len(divisors(abs(x % {y})))",
            "range": {
                "y": [2048, 65536]
            }
        },
        {
            "question": "compute the sum of all divisors of the result mod {y}",
            "validator": "from sympy import divisors; validator=lambda x: sum(divisors(abs(x % {y})))",
            "range": {
                "y": [2048, 65536]
            }
        },
        {
            "question": "return the largest prime less than or equal to the ((result mod {y}) + 4)",
            "validator": "from sympy import prevprime; validator=lambda x: prevprime((x % {y})+4)",
            "range": {
                "y": [1000, 4000]
            }
        },
        {
            "question": "compute the factorial of the last digit of the result",
            "validator": "from math import factorial; validator=lambda x: factorial(abs(x)%10)",
            "range": {}
        },
        {
            "question": "compute the factorial of the result mod {y}",
            "validator": "from math import factorial; validator=lambda x: factorial(abs(x)%{y})",
            "range": {
                "y": [10, 200]
            }
        },
        {
            "question": "compute the sum of squares of the digits of the result",
            "validator": "validator=lambda x: sum(int(d)**2 for d in str(abs(x)))",
            "range": {}
        },
        {
            "question": "compute the product of the digits of the result, ignoring 0",
            "validator": "import math; validator=lambda x: math.prod([int(d) for d in str(abs(x)) if int(d)])",
            "range": {}
        }
    ],
    "init": [
        "Write a function `calc(x: int) -> int` to calculate",
        "Write a function `calc(x: int) -> int` to get",
        "Write a function `calc(x: int)` to calculate",
        "Write a function `calc(x: int)` to get",
        "Write `calc(x: int) -> int` such that it calculate",
        "Write `calc(x: int) -> int` such that it get",
        "Write `calc(x: int)` such that it calculate",
        "Write `calc(x: int)` such that it get",
        "Create a function `calc(x: int) -> int` that returns",
        "Create a function `calc(x: int)` that returns",
        "Implement a Python function `calc(x: int) -> int` which returns",
        "Implement a Python function `calc(x: int)` which returns",
        "Define a function `calc(x: int) -> int` to find",
        "Define a function `calc(x: int)` to find",
        "Your task is to write a function `calc(x: int) -> int` that computes",
        "Your task is to write a function `calc(x: int)` that computes",
        "Your task is to write a function `calc(x: int) -> int` that calculates",
        "Your task is to write a function `calc(x: int)` that calculates",
        "Your task is to write a function `calc(x: int) -> int` that finds",
        "Your task is to write a function `calc(x: int)` that finds"
    ],
    "cont": [
        ", then",
        ", and then",
        ", followed by",
        ", following with",
        ", and afterwards,",
        "with the result then being used to",
        ", with the result then",
        ", and that result is then used to",
        ", from which you should",
        ", which is then followed by"
    ]
}
