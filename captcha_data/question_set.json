{
    "construct": [
        "{init} {dyn:base}",
        "{init} {dyn:base} {cont} {dyn:part}",
        "{init} {dyn:base} {cont} {dyn:part} {cont} {dyn:part}"
    ],
    "base": [
        {
            "question": "{y}+x",
            "validator": "validator=lambda x: {y}+x",
            "range": {
                "__base__": [1, 65536],
                "y": [-65536, 65536]
            }
        },
        {
            "question": "x-th prime number",
            "validator": "from sympy import prime; validator=prime",
            "range": {
                "__base__": [1, 2000]
            }
        },
        {
            "question": "[x+{y}]-th prime number",
            "validator": "from sympy import prime; validator=lambda x:prime(x+{y})",
            "range": {
                "__base__": [1, 2000],
                "y": [1, 2000]
            }
        },
        {
            "question": "{y}-x",
            "validator": "lambda x:{y}-x",
            "range": {
                "__base__": [1, 65536],
                "y": [-65536, 65536]
            }
        },
        {
            "question": "x-{y}",
            "validator": "lambda x:x-{y}",
            "range": {
                "__base__": [1, 65536],
                "y": [-65536, 65536]
            }
        },
        {
            "question": "{y}*x",
            "validator": "lambda x:{y}*x",
            "range": {
                "__base__": [1, 65536],
                "y": [-65536, 65536]
            }
        },
        {
            "question": "the x-th natural number(exclude 0), k that have a remainder of {y} when divide by {z}",
            "validator": "lambda x:(x-1)*{z}+{y}",
            "range": {
                "__base__": [1, 65536],
                "y": [1, 20],
                "z": [21, 200]
            }
        },
        {
            "question": "find the x-th fibonacci number with starting point at (1, 1) (for clarity, fib(1)=1, fib(2)=1)",
            "validator": "from sympy import fibonacci; validator=fibonacci",
            "range": {
                "__base__": [3, 4000]
            }
        },
        {
            "question": "find the x-th fibonacci number with starting point at ({y}, {z}) (for clarity, fib(1)={y}, fib(2)={z})",
            "validator": "from sympy import fibonacci; validator=lambda x:{y}*fibonacci(x-1)+{z}*fibonacci(x) # Since __base__>=3, no handling needed for 1,2",
            "range": {
                "__base__": [3, 4000],
                "y": [0, 9],
                "z": [1, 9]
            }
        }
    ],
    "part": [
        {
            "question": "add {y}",
            "validator": "validator=lambda x:x+{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "subtract {y}",
            "validator": "validator=lambda x:x-{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "subtract from {y}",
            "validator": "validator=lambda x:{y}-x",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "multiply by {y}",
            "validator": "validator=lambda x:x*{y}",
            "range": {
                "y": [1, 65536]
            }
        },
        {
            "question": "multiply by {y}",
            "validator": "validator=lambda x:x*{y}",
            "range": {
                "y": [-65536, -1]
            }
        },
        {
            "question": "integer divide {y}",
            "validator": "validator=lambda x:x//{y}",
            "range": {
                "y": [1, 65536]
            }
        },
        {
            "question": "integer divide from {y}",
            "validator": "validator=lambda x:{y}//x",
            "range": {
                "y": [1, 65536]
            }
        },
        {
            "question": "integer divide {y}",
            "validator": "validator=lambda x:x//{y}",
            "range": {
                "y": [-65536, -1]
            }
        },
        {
            "question": "integer divide from {y}",
            "validator": "validator=lambda x:{y}//x",
            "range": {
                "y": [-65536, -1]
            }
        },
        {
            "question": "bitwise XOR by {y}",
            "validator": "validator=lambda x:x^{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "bitwise invert",
            "validator": "validator=lambda x:~x",
            "range": {}
        },
        {
            "question": "bitwise AND by {y}",
            "validator": "validator=lambda x:x&{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "bitwise OR by {y}",
            "validator": "validator=lambda x:x|{y}",
            "range": {
                "y": [-65536, 65536]
            }
        },
        {
            "question": "modulo by {y}",
            "validator": "validator=lambda x:x%{y}",
            "range": {
                "y": [1, 65536]
            }
        },
        {
            "question": "raise to the power of {y}",
            "validator": "validator=lambda x:x**{y}",
            "range": {
                "base": [1, 100],
                "y": [1, 5]
            }
        },
        {
            "question": "bitwise left shift by {y}",
            "validator": "validator=lambda x:x<<{y}",
            "range": {
                "y": [0, 31]
            }
        },
        {
            "question": "bitwise right shift by {y}",
            "validator": "validator=lambda x:x>>{y}",
            "range": {
                "y": [0, 31]
            }
        },
        {
            "question": "get the absolute value",
            "validator": "validator=lambda x:abs(x)",
            "range": {}
        }
    ],
    "init": [
        "Write a function `calc(x: int) -> int` to calculate",
        "Write a function `calc(x: int) -> int` to get",
        "Write a function `calc(x: int)` to calculate",
        "Write a function `calc(x: int)` to get",
        "Write `calc(x: int) -> int` such that it calculate",
        "Write `calc(x: int) -> int` such that it get",
        "Write `calc(x: int)` such that it calculate",
        "Write `calc(x: int)` such that it get",
        "Create a function `calc(x: int) -> int` that returns",
        "Create a function `calc(x: int)` that returns",
        "Implement a Python function `calc(x: int) -> int` which returns",
        "Implement a Python function `calc(x: int)` which returns",
        "Define a function `calc(x: int) -> int` to find",
        "Define a function `calc(x: int)` to find",
        "Your task is to write a function `calc(x: int) -> int` that computes",
        "Your task is to write a function `calc(x: int)` that computes",
        "Your task is to write a function `calc(x: int) -> int` that calculates",
        "Your task is to write a function `calc(x: int)` that calculates",
        "Your task is to write a function `calc(x: int) -> int` that finds",
        "Your task is to write a function `calc(x: int)` that finds"
    ],
    "cont": [
        ", then",
        ", and then",
        ", followed by",
        ", following with",
        ", and afterwards,",
        "with the result then being used to",
        ", with the result then",
        ", and that result is then used to",
        ", from which you should",
        ", which is then followed by"
    ]
}
